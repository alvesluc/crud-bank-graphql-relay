type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String!
  name: String
  email: String
  balance: Int
  createdAt: String
  updatedAt: String
}

type Mutation {
  UserLoginWithEmail(input: UserLoginWithEmailInput!): UserLoginWithEmailPayload
  UserRegisterWithEmail(input: UserRegisterWithEmailInput!): UserRegisterWithEmailPayload
  TransactionTransfer(input: TransactionTransferInput!): TransactionTransferPayload
}

type UserLoginWithEmailPayload {
  token: String
  me: User
  error: String
  success: String
  clientMutationId: String
}

input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterWithEmailPayload {
  token: String
  me: User
  error: String
  success: String
  clientMutationId: String
}

input UserRegisterWithEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type TransactionTransferPayload {
  transaction: Transaction
  error: String
  success: String
  clientMutationId: String
}

type Transaction implements Node {
  """The ID of an object"""
  id: ID!
  _id: String!
  sender: User
  receiver: User
  amount: Int
  createdAt: String
  updatedAt: String
}

input TransactionTransferInput {
  senderId: String!
  receiverId: String!
  amount: Int!
  idempotencyKey: String!
  clientMutationId: String
}